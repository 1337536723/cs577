# Bradford Smith (bsmith8)
# CS 577 Lab 8 report.txt
# 11/19/2015
# "I pledge my honor that I have abided by the Stevens Honor System."
################################################################################

The first module for processing and printing statistics from a pcap file is run
using `./sniffer <pcap>`. It opens and loops through the pcap file skipping over
packets that are not ethernet packets, then checks the IP headers of those
packets in order to check if they are TCP, UDP or other IP protocol packets.

The second module for searching the pcap file is run using `./sniffer <pcap>
search <pattern>`. It opens and loops through the pcap file, skipping over
packets that are not ethernet packets, then checks to see if data in the packet
matches the provided hex string pattern using `memmem`.

The third module for locating TCP flows using SSL/TLS is run using `./sniffer
<pcap> flows`. It opens and loops through the pcap file, skipping over any
packets that are not TCP packets, then checks to see if they contain an SSL/TLS
connection using `memmem`. This prints out any and all SSL/TLS packets and
counts them. I started work on a more advanced version that put each packet in a
linked list and would attempt to reconstruct the flow by sorting them by
sequence number, eliminating duplicate sequence numbers then finding where the
source and destination addresses change in order to count a new "flow". However,
my linked list implementation was too stripped-down to allow for easy sorting
and I ran out of time. This version can still be run by using `./sniffer <pcap>
flows-r` but it won't print any useful results.
